image_config: &image_config

  # make sure to set your Docker Hub username & password in CircleCI,
  # either as project-specific environment variables
  # or as resources in your organization's org-global Context

  IMAGE_NAME: sevenide1.0

  IMAGE_TAG: basic

  # NOTE: if you're modifying this config.yml file manually
  # rather than using the included setup script,
  # make sure you also add the values of your IMAGE_NAME & IMAGE_TAG variables
  # to the `test_image` job (line 55)

  LINUX_VERSION: ubuntu:18.04 

  # RUBY_VERSION_NUM: yes

  # NODE_VERSION_NUM: yes

  # PYTHON_VERSION_NUM: yes

  JAVA: false

  MYSQL_CLIENT: false

  POSTGRES_CLIENT: false

  DOCKERIZE: false

  BROWSERS: false

version: 2
jobs:
  build:
    machine: true
    environment:
      <<: *image_config

    steps:
      - checkout

      - run:
          name: Installing git
          command: 'sudo apt-get update && sudo apt-get install -y git-core'
     
      - run: 
          name: Downloading submodules
          command: 'git submodule init && git submodule update --remote'
     
      - run:                                                                   
          name: Installing apt-add-repository
          command: 'sudo apt-get update && sudo apt install -y software-properties-common'

      - run:                                                                   
          name: Installing SUDO
          command: 'sudo apt-get update && sudo apt install -y sudo && sudo rm -rf /var/lib/apt/lists'

      - run:                                                                   
          name: Installing GCC
          command: 'sudo apt-get update && sudo apt-get install -y gcc g++'

      - run:                                                  
          name: Installing CMAKE
          command: 'sudo apt-get update && sudo apt-get install -y cmake'

      - run:                                                  
          name: Installing OpenGL
          command: 'sudo apt-get update && sudo  apt-get install -y libglu1-mesa-dev mesa-common-dev libglew-dev'

      - run:
          name: Installing Freetype, GLM
          command: 'sudo apt-get update && sudo apt-get install -y libfreetype6-dev libglm-dev'

      - run:
          name: Installing GLFW
          command: ' wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add - && 
                     wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - && sudo apt-get update && sudo apt-get install -y libglfw3-dev'
      - run:
          name: Installing TinyXML-2
          command: 'sudo apt-get update && sudo apt-get install -y libtinyxml2-dev'      

      - run:
          name: Install Qt 5.12.1
          command: 'add-apt-repository ppa:beineri/opt-qt-5.12.1.-bionic && sudo apt-get update && sudo apt-get install -y qt512-meta-minimal qtbase5-dev'

      - run:
          name: Sourcing
          command: 'opt/qt512/bin/qt512-env.sh'

      - run:
          name: Exporting path
          command: 'export PATH=$PATH:/opt/qt512/bin/ && echo $PATH'

      - run:
          name: Configuring project for standard build
          command: 'sudo mkdir build && cd build sudo cmake .. -DBUILD_FOR_EDITOR=ON _DUSE_CONTEXT_GUARD=ON '

      - run:
          name: Building ALL
          command: 'cd build && make all -j 8'

      - run:
          name: Configure project for install
          command: 'sudo mkdir install-build && cd install-build && sudo cmake ../src/engine -DINSTALL_BUILD=ON'

      - run:
          name: Install
          command: 'cd install-build && sudo cmake --build . --target.install'

      - run:
          name: Running tests
          command: 'cd build && make runAllTests'     
                  

      - run: bash scripts/generate.sh > Dockerfile

      - run:
           name:"login and pass":
           command: echo ${DOCKER_USERNAME} echo {DOCKER_PASSWORD}           

      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - run: docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG .

      - run: docker push $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG && sleep 10

      - store_artifacts:
         path: Dockerfile

  test_image:
    docker:
      - image: $DOCKER_USERNAME/sevenide1.0:basic
        environment:
          <<: *image_config

    steps:
      - checkout

      - run:
          name: start Xvfb for phantomjs test
          # # command: Xvfb :99
          # # background: true

      - run:
          name: bats tests
          command: |
            mkdir -p test_results/bats
            bats scripts/tests.bats | \
            perl scripts/tap-to-junit.sh > \
            test_results/bats/results.xml

      - store_test_results:
          path: test_results

      - store_artifacts:
          path: test_results

workflows:
  version: 2
  dockerfile_wizard:
    jobs:
      - build:
          context: org-global

      - test_image:
          context: org-global
          requires:
            - build
